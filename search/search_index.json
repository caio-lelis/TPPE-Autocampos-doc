{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TPPE - AutoCampos Justificativa do Projeto A escolha do projeto AutoCampos foi motivada pelo desejo de revisitar e aprimorar um sistema desenvolvido no in\u00edcio da gradua\u00e7\u00e3o, com o objetivo de aplicar os conhecimentos adquiridos ao longo do curso de forma pr\u00e1tica e significativa. Ao inv\u00e9s de iniciar um projeto totalmente novo, optou-se por evoluir uma solu\u00e7\u00e3o j\u00e1 existente, permitindo: Avaliar a pr\u00f3pria evolu\u00e7\u00e3o t\u00e9cnica e conceitual; Refatorar e modernizar o c\u00f3digo com boas pr\u00e1ticas de engenharia de software; Aplicar tecnologias atuais e mais robustas; Tornar o sistema mais escal\u00e1vel, modular e preparado para uso real. Essa abordagem tamb\u00e9m proporcionou uma oportunidade valiosa de comparar paradigmas, arquiteturas e ferramentas utilizadas em diferentes momentos da forma\u00e7\u00e3o acad\u00eamica. Acesse o projeto antigo aqui https://github.com/caio-lelis/Concessionaria-AutoCampos-Orientacao-a-Objetos-","title":"In\u00edcio"},{"location":"#tppe-autocampos","text":"","title":"TPPE - AutoCampos"},{"location":"#justificativa-do-projeto","text":"A escolha do projeto AutoCampos foi motivada pelo desejo de revisitar e aprimorar um sistema desenvolvido no in\u00edcio da gradua\u00e7\u00e3o, com o objetivo de aplicar os conhecimentos adquiridos ao longo do curso de forma pr\u00e1tica e significativa. Ao inv\u00e9s de iniciar um projeto totalmente novo, optou-se por evoluir uma solu\u00e7\u00e3o j\u00e1 existente, permitindo: Avaliar a pr\u00f3pria evolu\u00e7\u00e3o t\u00e9cnica e conceitual; Refatorar e modernizar o c\u00f3digo com boas pr\u00e1ticas de engenharia de software; Aplicar tecnologias atuais e mais robustas; Tornar o sistema mais escal\u00e1vel, modular e preparado para uso real. Essa abordagem tamb\u00e9m proporcionou uma oportunidade valiosa de comparar paradigmas, arquiteturas e ferramentas utilizadas em diferentes momentos da forma\u00e7\u00e3o acad\u00eamica. Acesse o projeto antigo aqui https://github.com/caio-lelis/Concessionaria-AutoCampos-Orientacao-a-Objetos-","title":"Justificativa do Projeto"},{"location":"desenvolvimento/arquitetura_pastas/","text":"Arquitetura de Pastas Abaixo est\u00e1 a estrutura de diret\u00f3rios do projeto AutoCampos , organizada para promover clareza, modularidade e facilidade de manuten\u00e7\u00e3o. . \u251c\u2500\u2500 data \u2502 \u2514\u2500\u2500 assets \u2514\u2500\u2500 src \u251c\u2500\u2500 api \u251c\u2500\u2500 core \u251c\u2500\u2500 models \u251c\u2500\u2500 schemas \u251c\u2500\u2500 services \u2514\u2500\u2500 tests \u2514\u2500\u2500 unit \u2514\u2500\u2500 models Descri\u00e7\u00e3o dos Diret\u00f3rios data/assets/ Cont\u00e9m arquivos est\u00e1ticos e recursos auxiliares, como imagens, diagramas e outros ativos utilizados na documenta\u00e7\u00e3o ou interface. src/api/ Respons\u00e1vel pelas rotas da aplica\u00e7\u00e3o (endpoints). Aqui ficam os controladores que recebem as requisi\u00e7\u00f5es HTTP e interagem com os servi\u00e7os e modelos. src/core/ Cont\u00e9m configura\u00e7\u00f5es centrais do projeto, como vari\u00e1veis de ambiente, inicializa\u00e7\u00e3o da aplica\u00e7\u00e3o, middlewares e autentica\u00e7\u00e3o. src/models/ Define os modelos de dados que representam as tabelas do banco de dados, geralmente utilizando um ORM como SQLAlchemy. src/schemas/ Cont\u00e9m os esquemas de valida\u00e7\u00e3o de dados (Pydantic), usados para entrada e sa\u00edda de dados nas APIs. src/services/ Implementa a l\u00f3gica de neg\u00f3cio da aplica\u00e7\u00e3o. Os servi\u00e7os s\u00e3o respons\u00e1veis por processar dados, aplicar regras e interagir com os modelos. Essa organiza\u00e7\u00e3o segue boas pr\u00e1ticas de desenvolvimento, facilitando a escalabilidade e a colabora\u00e7\u00e3o entre desenvolvedores.","title":"Arquitetura de Pastas"},{"location":"desenvolvimento/arquitetura_pastas/#arquitetura-de-pastas","text":"Abaixo est\u00e1 a estrutura de diret\u00f3rios do projeto AutoCampos , organizada para promover clareza, modularidade e facilidade de manuten\u00e7\u00e3o. . \u251c\u2500\u2500 data \u2502 \u2514\u2500\u2500 assets \u2514\u2500\u2500 src \u251c\u2500\u2500 api \u251c\u2500\u2500 core \u251c\u2500\u2500 models \u251c\u2500\u2500 schemas \u251c\u2500\u2500 services \u2514\u2500\u2500 tests \u2514\u2500\u2500 unit \u2514\u2500\u2500 models","title":"Arquitetura de Pastas"},{"location":"desenvolvimento/arquitetura_pastas/#descricao-dos-diretorios","text":"data/assets/ Cont\u00e9m arquivos est\u00e1ticos e recursos auxiliares, como imagens, diagramas e outros ativos utilizados na documenta\u00e7\u00e3o ou interface. src/api/ Respons\u00e1vel pelas rotas da aplica\u00e7\u00e3o (endpoints). Aqui ficam os controladores que recebem as requisi\u00e7\u00f5es HTTP e interagem com os servi\u00e7os e modelos. src/core/ Cont\u00e9m configura\u00e7\u00f5es centrais do projeto, como vari\u00e1veis de ambiente, inicializa\u00e7\u00e3o da aplica\u00e7\u00e3o, middlewares e autentica\u00e7\u00e3o. src/models/ Define os modelos de dados que representam as tabelas do banco de dados, geralmente utilizando um ORM como SQLAlchemy. src/schemas/ Cont\u00e9m os esquemas de valida\u00e7\u00e3o de dados (Pydantic), usados para entrada e sa\u00edda de dados nas APIs. src/services/ Implementa a l\u00f3gica de neg\u00f3cio da aplica\u00e7\u00e3o. Os servi\u00e7os s\u00e3o respons\u00e1veis por processar dados, aplicar regras e interagir com os modelos. Essa organiza\u00e7\u00e3o segue boas pr\u00e1ticas de desenvolvimento, facilitando a escalabilidade e a colabora\u00e7\u00e3o entre desenvolvedores.","title":"Descri\u00e7\u00e3o dos Diret\u00f3rios"},{"location":"desenvolvimento/contribuicao/","text":"Guia de Contribui\u00e7\u00e3o Documento que descreve os padr\u00f5es de contribui\u00e7\u00e3o para o projeto TPPE-Autocampos. Branches - Conventional Branches Link de acesso Estrutura: <tipo>/<descri\u00e7\u00e3o-curta> Tipos de branch feature/: Para novas funcionalidades. fix/: Para corre\u00e7\u00f5es de bugs. hotfix/: Para corre\u00e7\u00f5es urgentes. chore/: Para tarefas de manuten\u00e7\u00e3o. docs/: Para documenta\u00e7\u00e3o. refactor/: Para refatora\u00e7\u00e3o de c\u00f3digo. test/: Para testes. Exemplo git checkout -b feature/nova-funcionalidade Padr\u00e3o de Commits - Conventional commits Link de acesso Estrutura: <tipo>: <descri\u00e7\u00e3o> Tipos de commit feat: Para novas funcionalidades. fix: Para corre\u00e7\u00f5es de bugs. docs: Para documenta\u00e7\u00e3o. style: Para formata\u00e7\u00e3o de c\u00f3digo (espa\u00e7os, v\u00edrgulas, etc). refactor: Para refatora\u00e7\u00e3o de c\u00f3digo. test: Para testes. chore: Para tarefas de manuten\u00e7\u00e3o. Exemplo git commit -m \"feat: adicionar nova funcionalidade\"","title":"Guia de Contribui\u00e7\u00e3o"},{"location":"desenvolvimento/contribuicao/#guia-de-contribuicao","text":"Documento que descreve os padr\u00f5es de contribui\u00e7\u00e3o para o projeto TPPE-Autocampos.","title":"Guia de Contribui\u00e7\u00e3o"},{"location":"desenvolvimento/contribuicao/#branches-conventional-branches-link-de-acesso","text":"Estrutura: <tipo>/<descri\u00e7\u00e3o-curta>","title":"Branches - Conventional Branches Link de acesso"},{"location":"desenvolvimento/contribuicao/#tipos-de-branch","text":"feature/: Para novas funcionalidades. fix/: Para corre\u00e7\u00f5es de bugs. hotfix/: Para corre\u00e7\u00f5es urgentes. chore/: Para tarefas de manuten\u00e7\u00e3o. docs/: Para documenta\u00e7\u00e3o. refactor/: Para refatora\u00e7\u00e3o de c\u00f3digo. test/: Para testes.","title":"Tipos de branch"},{"location":"desenvolvimento/contribuicao/#exemplo","text":"git checkout -b feature/nova-funcionalidade","title":"Exemplo"},{"location":"desenvolvimento/contribuicao/#padrao-de-commits-conventional-commits","text":"Link de acesso","title":"Padr\u00e3o de Commits - Conventional commits"},{"location":"desenvolvimento/contribuicao/#estrutura","text":"<tipo>: <descri\u00e7\u00e3o>","title":"Estrutura:"},{"location":"desenvolvimento/contribuicao/#tipos-de-commit","text":"feat: Para novas funcionalidades. fix: Para corre\u00e7\u00f5es de bugs. docs: Para documenta\u00e7\u00e3o. style: Para formata\u00e7\u00e3o de c\u00f3digo (espa\u00e7os, v\u00edrgulas, etc). refactor: Para refatora\u00e7\u00e3o de c\u00f3digo. test: Para testes. chore: Para tarefas de manuten\u00e7\u00e3o.","title":"Tipos de commit"},{"location":"desenvolvimento/contribuicao/#exemplo_1","text":"git commit -m \"feat: adicionar nova funcionalidade\"","title":"Exemplo"},{"location":"desenvolvimento/historias_usuario/","text":"","title":"Hist\u00f3rias de Usu\u00e1rio"},{"location":"design/arquitetura/","text":"Arquitetura do Projeto O projeto AutoCampos adota uma arquitetura baseada em microsservi\u00e7os, com foco em modularidade, escalabilidade e facilidade de manuten\u00e7\u00e3o. Backend O backend \u00e9 totalmente containerizado e composto por diversos servi\u00e7os que se comunicam entre si. As principais tecnologias utilizadas incluem: FastAPI \u2014 Framework moderno e perform\u00e1tico para constru\u00e7\u00e3o de APIs RESTful em Python. PostgreSQL \u2014 Banco de dados relacional robusto e confi\u00e1vel. MinIO \u2014 Solu\u00e7\u00e3o de armazenamento de objetos compat\u00edvel com S3, utilizada para armazenar arquivos e dados n\u00e3o estruturados. Docker \u2014 Utilizado para conteinerizar os servi\u00e7os, garantindo portabilidade e padroniza\u00e7\u00e3o do ambiente de desenvolvimento e produ\u00e7\u00e3o. Frontend O frontend est\u00e1 sendo desenvolvido com React , uma biblioteca JavaScript amplamente utilizada para constru\u00e7\u00e3o de interfaces de usu\u00e1rio din\u00e2micas e reativas. \u26a0\ufe0f O frontend ainda est\u00e1 em fase de defini\u00e7\u00e3o, e novas tecnologias podem ser incorporadas conforme a evolu\u00e7\u00e3o do projeto. Diagrama de arquitetura","title":"Arquitetura"},{"location":"design/arquitetura/#arquitetura-do-projeto","text":"O projeto AutoCampos adota uma arquitetura baseada em microsservi\u00e7os, com foco em modularidade, escalabilidade e facilidade de manuten\u00e7\u00e3o.","title":"Arquitetura do Projeto"},{"location":"design/arquitetura/#backend","text":"O backend \u00e9 totalmente containerizado e composto por diversos servi\u00e7os que se comunicam entre si. As principais tecnologias utilizadas incluem: FastAPI \u2014 Framework moderno e perform\u00e1tico para constru\u00e7\u00e3o de APIs RESTful em Python. PostgreSQL \u2014 Banco de dados relacional robusto e confi\u00e1vel. MinIO \u2014 Solu\u00e7\u00e3o de armazenamento de objetos compat\u00edvel com S3, utilizada para armazenar arquivos e dados n\u00e3o estruturados. Docker \u2014 Utilizado para conteinerizar os servi\u00e7os, garantindo portabilidade e padroniza\u00e7\u00e3o do ambiente de desenvolvimento e produ\u00e7\u00e3o.","title":"Backend"},{"location":"design/arquitetura/#frontend","text":"O frontend est\u00e1 sendo desenvolvido com React , uma biblioteca JavaScript amplamente utilizada para constru\u00e7\u00e3o de interfaces de usu\u00e1rio din\u00e2micas e reativas. \u26a0\ufe0f O frontend ainda est\u00e1 em fase de defini\u00e7\u00e3o, e novas tecnologias podem ser incorporadas conforme a evolu\u00e7\u00e3o do projeto.","title":"Frontend"},{"location":"design/arquitetura/#diagrama-de-arquitetura","text":"","title":"Diagrama de arquitetura"},{"location":"design/modelagem_banco/","text":"Modelagem do Banco de Dados Este m\u00f3dulo documenta a modelagem do banco de dados do projeto Autocampos . Modelo Conceitual O modelo conceitual representa uma vis\u00e3o de alto n\u00edvel, destacando as entidades principais e seus relacionamentos. Ele foi desenvolvido utilizando a nota\u00e7\u00e3o Entidade-Relacionamento (ER) no BRModelo. Modelo L\u00f3gico O modelo l\u00f3gico traduz o modelo conceitual para uma estrutura mais pr\u00f3xima da implementa\u00e7\u00e3o em banco de dados relacional, incluindo chaves prim\u00e1rias, estrangeiras e tipos de relacionamento. Modelo F\u00edsico O modelo f\u00edsico descreve a implementa\u00e7\u00e3o real do banco de dados: Script SQL - AutoCampos -- Remove tabelas existentes para evitar conflitos ao executar o script novamente. -- A op\u00e7\u00e3o CASCADE remove automaticamente objetos dependentes (como views ou chaves estrangeiras). DROP TABLE IF EXISTS interesses, vendas, anuncios, carros, motos, admins, funcionarios, usuarios, clientes CASCADE; -- Tabela Central de Usu\u00e1rios do Sistema -- Armazena dados de login e informa\u00e7\u00f5es b\u00e1sicas para todos os usu\u00e1rios internos. CREATE TABLE usuarios ( id SERIAL PRIMARY KEY, nome TEXT NOT NULL, cpf VARCHAR(11) NOT NULL UNIQUE, email TEXT NOT NULL UNIQUE, senha TEXT NOT NULL -- Em um ambiente real, a senha deve ser armazenada como um hash. ); -- Tabela de Funcion\u00e1rios -- Cont\u00e9m informa\u00e7\u00f5es espec\u00edficas de funcion\u00e1rios. Um funcion\u00e1rio \u00e9 um tipo de usu\u00e1rio. CREATE TABLE funcionarios ( id SERIAL PRIMARY KEY, usuario_id INTEGER NOT NULL UNIQUE REFERENCES usuarios(id) ON DELETE CASCADE, rendimento_mensal NUMERIC(10, 2) NOT NULL ); -- Tabela de Administradores -- Designa quais usu\u00e1rios possuem privil\u00e9gios de administrador. Um admin tamb\u00e9m \u00e9 um tipo de usu\u00e1rio. CREATE TABLE admins ( id SERIAL PRIMARY KEY, usuario_id INTEGER NOT NULL UNIQUE REFERENCES usuarios(id) ON DELETE CASCADE, is_admin BOOLEAN DEFAULT FALSE ); -- Tabela de Clientes -- Armazena informa\u00e7\u00f5es de contato de clientes interessados ou que realizaram compras. CREATE TABLE clientes ( id SERIAL PRIMARY KEY, nome TEXT NOT NULL, cpf VARCHAR(11) NOT NULL UNIQUE, email TEXT UNIQUE, telefone VARCHAR(20), endereco TEXT ); -- Tabela para Carros (agora inclui atributos de 'veiculos') CREATE TABLE carros ( id SERIAL PRIMARY KEY, modelo TEXT NOT NULL, marca TEXT NOT NULL, ano INTEGER NOT NULL, cor TEXT, tipo_combustivel VARCHAR(50), preco NUMERIC(10, 2) NOT NULL, revisado BOOLEAN DEFAULT FALSE, disponivel BOOLEAN DEFAULT TRUE, tipo_direcao VARCHAR(50), tracao VARCHAR(10), consumo_cidade NUMERIC(4, 2), airbag BOOLEAN DEFAULT FALSE, ar_condicionado BOOLEAN DEFAULT FALSE ); -- Tabela para Motos (agora inclui atributos de 'veiculos') CREATE TABLE motos ( id SERIAL PRIMARY KEY, modelo TEXT NOT NULL, marca TEXT NOT NULL, ano INTEGER NOT NULL, cor TEXT, tipo_combustivel VARCHAR(50), preco NUMERIC(10, 2) NOT NULL, revisado BOOLEAN DEFAULT FALSE, disponivel BOOLEAN DEFAULT TRUE, freio_dianteiro VARCHAR(50), freio_traseiro VARCHAR(50), estilo VARCHAR(50), cilindradas INTEGER, velocidade_max INTEGER ); -- Tabela de An\u00fancios -- Um an\u00fancio agora pode se referir a um carro OU uma moto, mas n\u00e3o a ambos. CREATE TABLE anuncios ( id SERIAL PRIMARY KEY, funcionario_id INTEGER NOT NULL REFERENCES funcionarios(id), carro_id INTEGER UNIQUE REFERENCES carros(id) ON DELETE CASCADE, moto_id INTEGER UNIQUE REFERENCES motos(id) ON DELETE CASCADE, data_publicacao DATE NOT NULL DEFAULT CURRENT_DATE, imagem1_url TEXT, imagem2_url TEXT, imagem3_url TEXT, -- Restri\u00e7\u00e3o para garantir que apenas um dos IDs de ve\u00edculo seja preenchido CONSTRAINT chk_carro_moto_anuncio CHECK ((carro_id IS NOT NULL AND moto_id IS NULL) OR (carro_id IS NULL AND moto_id IS NOT NULL)) ); -- Tabela de Vendas -- Registra a venda de um ve\u00edculo, que deve ser realizada por um funcion\u00e1rio. -- Agora tem chaves estrangeiras diretas para carros e motos. CREATE TABLE vendas ( id SERIAL PRIMARY KEY, carro_id INTEGER UNIQUE REFERENCES carros(id) ON DELETE RESTRICT, moto_id INTEGER UNIQUE REFERENCES motos(id) ON DELETE RESTRICT, cliente_id INTEGER NOT NULL REFERENCES clientes(id) ON DELETE RESTRICT, funcionario_id INTEGER NOT NULL REFERENCES funcionarios(id) ON DELETE RESTRICT, data_venda DATE NOT NULL DEFAULT CURRENT_DATE, valor_final NUMERIC(10, 2) NOT NULL, comissao_venda NUMERIC(10, 2), -- Restri\u00e7\u00e3o para garantir que apenas um dos IDs de ve\u00edculo seja preenchido CONSTRAINT chk_carro_moto_venda CHECK ((carro_id IS NOT NULL AND moto_id IS NULL) OR (carro_id IS NULL AND moto_id IS NOT NULL)) ); -- Tabela de Interesses -- Registra o interesse de um cliente em um ve\u00edculo espec\u00edfico. CREATE TABLE interesses ( id SERIAL PRIMARY KEY, cliente_id INTEGER NOT NULL REFERENCES clientes(id) ON DELETE CASCADE, carro_id INTEGER REFERENCES carros(id) ON DELETE CASCADE, moto_id INTEGER REFERENCES motos(id) ON DELETE CASCADE, data_visita DATE, test_drive BOOLEAN DEFAULT FALSE, -- Restri\u00e7\u00e3o para garantir que apenas um dos IDs de ve\u00edculo seja preenchido CONSTRAINT chk_carro_moto_interesse CHECK ((carro_id IS NOT NULL AND moto_id IS NULL) OR (carro_id IS NULL AND moto_id IS NOT NULL)), -- Garante que um cliente n\u00e3o registre interesse duas vezes no mesmo carro ou moto UNIQUE (cliente_id, carro_id, moto_id) );","title":"Modelo do Banco"},{"location":"design/modelagem_banco/#modelagem-do-banco-de-dados","text":"Este m\u00f3dulo documenta a modelagem do banco de dados do projeto Autocampos .","title":"Modelagem do Banco de Dados"},{"location":"design/modelagem_banco/#modelo-conceitual","text":"O modelo conceitual representa uma vis\u00e3o de alto n\u00edvel, destacando as entidades principais e seus relacionamentos. Ele foi desenvolvido utilizando a nota\u00e7\u00e3o Entidade-Relacionamento (ER) no BRModelo.","title":"Modelo Conceitual"},{"location":"design/modelagem_banco/#modelo-logico","text":"O modelo l\u00f3gico traduz o modelo conceitual para uma estrutura mais pr\u00f3xima da implementa\u00e7\u00e3o em banco de dados relacional, incluindo chaves prim\u00e1rias, estrangeiras e tipos de relacionamento.","title":"Modelo L\u00f3gico"},{"location":"design/modelagem_banco/#modelo-fisico","text":"O modelo f\u00edsico descreve a implementa\u00e7\u00e3o real do banco de dados:","title":"Modelo F\u00edsico"},{"location":"design/modelagem_banco/#script-sql-autocampos","text":"-- Remove tabelas existentes para evitar conflitos ao executar o script novamente. -- A op\u00e7\u00e3o CASCADE remove automaticamente objetos dependentes (como views ou chaves estrangeiras). DROP TABLE IF EXISTS interesses, vendas, anuncios, carros, motos, admins, funcionarios, usuarios, clientes CASCADE; -- Tabela Central de Usu\u00e1rios do Sistema -- Armazena dados de login e informa\u00e7\u00f5es b\u00e1sicas para todos os usu\u00e1rios internos. CREATE TABLE usuarios ( id SERIAL PRIMARY KEY, nome TEXT NOT NULL, cpf VARCHAR(11) NOT NULL UNIQUE, email TEXT NOT NULL UNIQUE, senha TEXT NOT NULL -- Em um ambiente real, a senha deve ser armazenada como um hash. ); -- Tabela de Funcion\u00e1rios -- Cont\u00e9m informa\u00e7\u00f5es espec\u00edficas de funcion\u00e1rios. Um funcion\u00e1rio \u00e9 um tipo de usu\u00e1rio. CREATE TABLE funcionarios ( id SERIAL PRIMARY KEY, usuario_id INTEGER NOT NULL UNIQUE REFERENCES usuarios(id) ON DELETE CASCADE, rendimento_mensal NUMERIC(10, 2) NOT NULL ); -- Tabela de Administradores -- Designa quais usu\u00e1rios possuem privil\u00e9gios de administrador. Um admin tamb\u00e9m \u00e9 um tipo de usu\u00e1rio. CREATE TABLE admins ( id SERIAL PRIMARY KEY, usuario_id INTEGER NOT NULL UNIQUE REFERENCES usuarios(id) ON DELETE CASCADE, is_admin BOOLEAN DEFAULT FALSE ); -- Tabela de Clientes -- Armazena informa\u00e7\u00f5es de contato de clientes interessados ou que realizaram compras. CREATE TABLE clientes ( id SERIAL PRIMARY KEY, nome TEXT NOT NULL, cpf VARCHAR(11) NOT NULL UNIQUE, email TEXT UNIQUE, telefone VARCHAR(20), endereco TEXT ); -- Tabela para Carros (agora inclui atributos de 'veiculos') CREATE TABLE carros ( id SERIAL PRIMARY KEY, modelo TEXT NOT NULL, marca TEXT NOT NULL, ano INTEGER NOT NULL, cor TEXT, tipo_combustivel VARCHAR(50), preco NUMERIC(10, 2) NOT NULL, revisado BOOLEAN DEFAULT FALSE, disponivel BOOLEAN DEFAULT TRUE, tipo_direcao VARCHAR(50), tracao VARCHAR(10), consumo_cidade NUMERIC(4, 2), airbag BOOLEAN DEFAULT FALSE, ar_condicionado BOOLEAN DEFAULT FALSE ); -- Tabela para Motos (agora inclui atributos de 'veiculos') CREATE TABLE motos ( id SERIAL PRIMARY KEY, modelo TEXT NOT NULL, marca TEXT NOT NULL, ano INTEGER NOT NULL, cor TEXT, tipo_combustivel VARCHAR(50), preco NUMERIC(10, 2) NOT NULL, revisado BOOLEAN DEFAULT FALSE, disponivel BOOLEAN DEFAULT TRUE, freio_dianteiro VARCHAR(50), freio_traseiro VARCHAR(50), estilo VARCHAR(50), cilindradas INTEGER, velocidade_max INTEGER ); -- Tabela de An\u00fancios -- Um an\u00fancio agora pode se referir a um carro OU uma moto, mas n\u00e3o a ambos. CREATE TABLE anuncios ( id SERIAL PRIMARY KEY, funcionario_id INTEGER NOT NULL REFERENCES funcionarios(id), carro_id INTEGER UNIQUE REFERENCES carros(id) ON DELETE CASCADE, moto_id INTEGER UNIQUE REFERENCES motos(id) ON DELETE CASCADE, data_publicacao DATE NOT NULL DEFAULT CURRENT_DATE, imagem1_url TEXT, imagem2_url TEXT, imagem3_url TEXT, -- Restri\u00e7\u00e3o para garantir que apenas um dos IDs de ve\u00edculo seja preenchido CONSTRAINT chk_carro_moto_anuncio CHECK ((carro_id IS NOT NULL AND moto_id IS NULL) OR (carro_id IS NULL AND moto_id IS NOT NULL)) ); -- Tabela de Vendas -- Registra a venda de um ve\u00edculo, que deve ser realizada por um funcion\u00e1rio. -- Agora tem chaves estrangeiras diretas para carros e motos. CREATE TABLE vendas ( id SERIAL PRIMARY KEY, carro_id INTEGER UNIQUE REFERENCES carros(id) ON DELETE RESTRICT, moto_id INTEGER UNIQUE REFERENCES motos(id) ON DELETE RESTRICT, cliente_id INTEGER NOT NULL REFERENCES clientes(id) ON DELETE RESTRICT, funcionario_id INTEGER NOT NULL REFERENCES funcionarios(id) ON DELETE RESTRICT, data_venda DATE NOT NULL DEFAULT CURRENT_DATE, valor_final NUMERIC(10, 2) NOT NULL, comissao_venda NUMERIC(10, 2), -- Restri\u00e7\u00e3o para garantir que apenas um dos IDs de ve\u00edculo seja preenchido CONSTRAINT chk_carro_moto_venda CHECK ((carro_id IS NOT NULL AND moto_id IS NULL) OR (carro_id IS NULL AND moto_id IS NOT NULL)) ); -- Tabela de Interesses -- Registra o interesse de um cliente em um ve\u00edculo espec\u00edfico. CREATE TABLE interesses ( id SERIAL PRIMARY KEY, cliente_id INTEGER NOT NULL REFERENCES clientes(id) ON DELETE CASCADE, carro_id INTEGER REFERENCES carros(id) ON DELETE CASCADE, moto_id INTEGER REFERENCES motos(id) ON DELETE CASCADE, data_visita DATE, test_drive BOOLEAN DEFAULT FALSE, -- Restri\u00e7\u00e3o para garantir que apenas um dos IDs de ve\u00edculo seja preenchido CONSTRAINT chk_carro_moto_interesse CHECK ((carro_id IS NOT NULL AND moto_id IS NULL) OR (carro_id IS NULL AND moto_id IS NOT NULL)), -- Garante que um cliente n\u00e3o registre interesse duas vezes no mesmo carro ou moto UNIQUE (cliente_id, carro_id, moto_id) );","title":"Script SQL - AutoCampos"},{"location":"design/uml/","text":"UML - Diagrama de Classes Esta se\u00e7\u00e3o apresenta os diagramas de classes utilizados no projeto AutoCampos , destacando a evolu\u00e7\u00e3o do design ao longo do tempo. Objetivo O diagrama de classes tem como objetivo representar a estrutura est\u00e1tica do sistema, detalhando as classes, seus atributos, m\u00e9todos e os relacionamentos entre elas. Ele serve como base para o desenvolvimento e manuten\u00e7\u00e3o do c\u00f3digo-fonte. Vers\u00e3o Antiga A vers\u00e3o inicial do diagrama foi elaborada durante a disciplina de orienta\u00e7\u00e3o a objetos, tendo em vista o amadurecimento durante o decorrer da gradua\u00e7\u00e3o, se faz necess\u00e1rio a melhoria para melhor entendimento sobre o projeto. Principais caracter\u00edsticas: Estrutura simplificada Foco em entidades principais Relacionamentos b\u00e1sicos entre classes Vers\u00e3o Atualizada A vers\u00e3o mais recente do diagrama reflete melhorias e refinamentos realizados ap\u00f3s revis\u00f5es t\u00e9cnicas. Melhorias implementadas: Inclus\u00e3o de novas classes e responsabilidades","title":"Diagramas UML"},{"location":"design/uml/#uml-diagrama-de-classes","text":"Esta se\u00e7\u00e3o apresenta os diagramas de classes utilizados no projeto AutoCampos , destacando a evolu\u00e7\u00e3o do design ao longo do tempo.","title":"UML - Diagrama de Classes"},{"location":"design/uml/#objetivo","text":"O diagrama de classes tem como objetivo representar a estrutura est\u00e1tica do sistema, detalhando as classes, seus atributos, m\u00e9todos e os relacionamentos entre elas. Ele serve como base para o desenvolvimento e manuten\u00e7\u00e3o do c\u00f3digo-fonte.","title":"Objetivo"},{"location":"design/uml/#versao-antiga","text":"A vers\u00e3o inicial do diagrama foi elaborada durante a disciplina de orienta\u00e7\u00e3o a objetos, tendo em vista o amadurecimento durante o decorrer da gradua\u00e7\u00e3o, se faz necess\u00e1rio a melhoria para melhor entendimento sobre o projeto. Principais caracter\u00edsticas: Estrutura simplificada Foco em entidades principais Relacionamentos b\u00e1sicos entre classes","title":"Vers\u00e3o Antiga"},{"location":"design/uml/#versao-atualizada","text":"A vers\u00e3o mais recente do diagrama reflete melhorias e refinamentos realizados ap\u00f3s revis\u00f5es t\u00e9cnicas. Melhorias implementadas: Inclus\u00e3o de novas classes e responsabilidades","title":"Vers\u00e3o Atualizada"},{"location":"infraestrutura/docker_compose/","text":"docker-compose.yml : services: db: image: postgres:13 environment: POSTGRES_USER: ${POSTGRES_USER} POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} POSTGRES_DB: ${POSTGRES_DB} volumes: - postgres_data:/var/lib/postgresql/data/ - ./init.sql:/docker-entrypoint-initdb.d/init.sql ports: - \"5432:5432\" healthcheck: test: [\"CMD-SHELL\", \"pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}\"] interval: 10s timeout: 10s retries: 10 db_test: # Novo servi\u00e7o para testes image: postgres:13 environment: POSTGRES_USER: ${POSTGRES_USER} POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} POSTGRES_DB: ${POSTGRES_DB}_test # Nome diferente para o banco de testes volumes: - postgres_test_data:/var/lib/postgresql/data/ ports: - \"5433:5432\" # Porta diferente para evitar conflito healthcheck: test: [\"CMD-SHELL\", \"pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}_test\"] interval: 5s timeout: 5s retries: 5 web: build: context: . dockerfile: Dockerfile args: PYTHON_VERSION: 3.9-slim ports: - \"8000:8000\" volumes: - .:/app - ./data/assets:/app/data/assets environment: - APP_ENV=development - PYTHONUNBUFFERED=1 - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB} depends_on: db: condition: service_healthy restart: unless-stopped command: sh -c \"sleep 5 && uvicorn main:app --host 0.0.0.0 --port 8000 --reload\" tests: build: context: . environment: - APP_ENV=testing - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db_test:5432/${POSTGRES_DB}_test depends_on: db_test: condition: service_healthy volumes: - .:/app command: > sh -c \"sleep 5 && pytest -v --cov=. --cov-report=term-missing src/tests/ \" volumes: postgres_data: postgres_test_data: # Volume separado para os testes","title":"Docker(Compose)"},{"location":"infraestrutura/docker_file/","text":"Dockerfile.yml : FROM python:3.9-slim WORKDIR /app RUN apt-get update && \\ apt-get install -y --no-install-recommends gcc python3-dev libpq-dev && \\ rm -rf /var/lib/apt/lists/* COPY requirements.txt . RUN pip install --no-cache-dir --upgrade pip && \\ pip install --no-cache-dir -r requirements.txt COPY . . EXPOSE 8000 CMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\", \"--reload\"]","title":"Docker(file)"},{"location":"infraestrutura/tecnologias/","text":"Tecnologias Escolhidas Esta se\u00e7\u00e3o apresenta as tecnologias utilizadas nas diferentes fases de desenvolvimento do projeto AutoCampos , destacando a evolu\u00e7\u00e3o da stack tecnol\u00f3gica ao longo do tempo. Tecnologias da Vers\u00e3o Antiga A primeira vers\u00e3o do projeto foi desenvolvida com foco em aplica\u00e7\u00f5es desktop, utilizando tecnologias tradicionais da plataforma Java. Stack utilizada: Java \u2014 Linguagem principal da aplica\u00e7\u00e3o Java Swing \u2014 Interface gr\u00e1fica (GUI) MySQL \u2014 Banco de dados relacional JDBC \u2014 Conex\u00e3o entre Java e o banco de dados Maven \u2014 Gerenciador de depend\u00eancias e build JUnit \u2014 Framework de testes unit\u00e1rios Tecnologias da Vers\u00e3o Atual A vers\u00e3o atual do projeto foi modernizada com foco em aplica\u00e7\u00f5es web, APIs RESTful e conteineriza\u00e7\u00e3o, visando escalabilidade, manutenibilidade e integra\u00e7\u00e3o cont\u00ednua. Stack utilizada: FastAPI \u2014 Framework web moderno e perform\u00e1tico para APIs em Python SQLAlchemy \u2014 ORM para manipula\u00e7\u00e3o de banco de dados PostgreSQL \u2014 Banco de dados relacional robusto e open-source Docker \u2014 Conteineriza\u00e7\u00e3o e padroniza\u00e7\u00e3o de ambientes pytest \u2014 Framework de testes para Python React \u2014 Biblioteca JavaScript para constru\u00e7\u00e3o de interfaces de usu\u00e1rio Considera\u00e7\u00f5es A transi\u00e7\u00e3o tecnol\u00f3gica reflete a evolu\u00e7\u00e3o do projeto em dire\u00e7\u00e3o a uma arquitetura mais moderna, modular e escal\u00e1vel, alinhada com boas pr\u00e1ticas de desenvolvimento de software.","title":"Tecnologias"},{"location":"infraestrutura/tecnologias/#tecnologias-escolhidas","text":"Esta se\u00e7\u00e3o apresenta as tecnologias utilizadas nas diferentes fases de desenvolvimento do projeto AutoCampos , destacando a evolu\u00e7\u00e3o da stack tecnol\u00f3gica ao longo do tempo.","title":"Tecnologias Escolhidas"},{"location":"infraestrutura/tecnologias/#tecnologias-da-versao-antiga","text":"A primeira vers\u00e3o do projeto foi desenvolvida com foco em aplica\u00e7\u00f5es desktop, utilizando tecnologias tradicionais da plataforma Java. Stack utilizada: Java \u2014 Linguagem principal da aplica\u00e7\u00e3o Java Swing \u2014 Interface gr\u00e1fica (GUI) MySQL \u2014 Banco de dados relacional JDBC \u2014 Conex\u00e3o entre Java e o banco de dados Maven \u2014 Gerenciador de depend\u00eancias e build JUnit \u2014 Framework de testes unit\u00e1rios","title":"Tecnologias da Vers\u00e3o Antiga"},{"location":"infraestrutura/tecnologias/#tecnologias-da-versao-atual","text":"A vers\u00e3o atual do projeto foi modernizada com foco em aplica\u00e7\u00f5es web, APIs RESTful e conteineriza\u00e7\u00e3o, visando escalabilidade, manutenibilidade e integra\u00e7\u00e3o cont\u00ednua. Stack utilizada: FastAPI \u2014 Framework web moderno e perform\u00e1tico para APIs em Python SQLAlchemy \u2014 ORM para manipula\u00e7\u00e3o de banco de dados PostgreSQL \u2014 Banco de dados relacional robusto e open-source Docker \u2014 Conteineriza\u00e7\u00e3o e padroniza\u00e7\u00e3o de ambientes pytest \u2014 Framework de testes para Python React \u2014 Biblioteca JavaScript para constru\u00e7\u00e3o de interfaces de usu\u00e1rio","title":"Tecnologias da Vers\u00e3o Atual"},{"location":"infraestrutura/tecnologias/#consideracoes","text":"A transi\u00e7\u00e3o tecnol\u00f3gica reflete a evolu\u00e7\u00e3o do projeto em dire\u00e7\u00e3o a uma arquitetura mais moderna, modular e escal\u00e1vel, alinhada com boas pr\u00e1ticas de desenvolvimento de software.","title":"Considera\u00e7\u00f5es"},{"location":"prototipo/prototipo/","text":"Prot\u00f3tipo","title":"Prot\u00f3tipo Figma"},{"location":"prototipo/prototipo/#prototipo","text":"","title":"Prot\u00f3tipo"}]}